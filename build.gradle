// DSL Gradle 7.0
plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'

    // https://plugins.gradle.org/plugin/net.researchgate.release
    // id 'net.researchgate.release' version '2.8.1'
    // https://plugins.gradle.org/plugin/nu.studer.credentials
    id 'nu.studer.credentials' version '3.0'
    // https://plugins.gradle.org/plugin/io.codearte.nexus-staging
    // id 'io.codearte.nexus-staging' version '0.30.0'

    //https://github.com/gradle-nexus/publish-plugin/
    id("io.github.gradle-nexus.publish-plugin") version "2.0.0"
}

//OrientDB version to use:
//ext.arcadeDbVersion = '25.5.1'
ext.arcadeDbVersion = '25.6.1'

 
// ejecutar: gradle idea 
// para que inicialize el proyecto y baje los javadocs.
apply plugin: 'idea'
idea{
    module {
        downloadJavadoc=true
    }
}


def info() {
    println "***************************************************************"
    println " SYSTEM: " + name
    println "VERSION: " + version
    println "   JAVA: " + System.getProperty('java.home')
    println "***************************************************************"
}


compileJava {
//    options.compilerArgs << '-Xlint:deprecation'
//    options.compilerArgs << '-Xlint:unchecked'
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

// Para hace el deploy en Sonatype
// 1. Hacer el commit a github desde NB
// 2. Ejecutar: gradle release
// 3. ir a: https://oss.sonatype.org/#stagingRepositories
//    buscar el repositorio y hacer clic en "Close"
// 4. Una vez cerrado hacer click en "Release"


//Para guardar el usuario y contrase침a en forma segura hacer:
//gradle addCredentials -PcredentialsKey=nexusUser -PcredentialsValue=XXXXX
//gradle addCredentials -PcredentialsKey=nexusPassword -PcredentialsValue=YYYYY
//o para hacerlo m치s seguro:
//gradle addCredentials -PcredentialsKey=nexusUser -PcredentialsValue=XXXXX -PcredentialsPassphrase=zzzzzzzz
//gradle addCredentials -PcredentialsKey=nexusPassword -PcredentialsValue=YYYYY -PcredentialsPassphrase=zzzzzzzz
//def nexusUser = credentials.nexusUser
//def nexusPassword = credentials.nexusPassword
def sonatypeUser = credentials.forKey("sonatypeUser")
def sonatypePassword = credentials.forKey("sonatypePassword")


// incrementar autom치ticamente el buildNumber
task autoBuildNumber {
    doFirst {
        File propertiesFile = new File('gradle.properties')
        def lines = propertiesFile.readLines()

        PrintWriter printWriter = new PrintWriter(propertiesFile)
        
        lines.each {String line ->
            if (line.startsWith("version") ){
                String versionNumber = line.tokenize("=")[1]
                String[] versionParts = versionNumber.tokenize(".")
                // recalcular el build 
                versionNumber = versionParts[0]+\
                                '.'+versionParts[1]+\
                                '.'+versionParts[2]+
                                '.'+( versionParts.length==4 ? (versionParts[3].toInteger()+1).toString():"1")
                
                line = "version="+versionNumber
//                println line
            }
            printWriter.println(line)
        }
        printWriter.close()
    }
}




// agregar la dependencia solo si no se trata de un release
if (! (project.gradle.startParameter.taskNames.join(",").toLowerCase().contains("release")
       || project.gradle.startParameter.taskNames.join(",").toLowerCase().contains("sabn")) 
   ) {
    build.configure{dependsOn autoBuildNumber} 
}

// desactivo la generaci칩n de javadoc en los proyectos que tengan la tarea
javadoc.enabled = true

repositories {
    //    maven {
    //        url "$sonatypeURLRelease"
    //            
    //        credentials {
    //            username = "$sonatypeUser"
    //            password = "$sonatypePassword"
    //        }
    //    }
    mavenLocal()
    mavenCentral()
}
    

dependencies {
    api "com.github.mdre:EasyProxy:1.+"

    implementation "com.github.mdre:tdd-agent:0.+"
    
    api "com.arcadedb:arcadedb-engine:${arcadeDbVersion}"
    api "com.arcadedb:arcadedb-server:${arcadeDbVersion}"
    //api "com.orientechnologies:orientdb-core:${orientDbVersion}:sources"
    
    testImplementation "junit:junit:[4,)"
    testImplementation "org.easymock:easymock:4.0.2"
    
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.23.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.23.1'
}

//task to find the path of the ogm agent automatically:
task findAgentPath {
    configurations.runtimeClasspath.files.each {
        if (it.getName().contains('tdd-agent')) {
            project.ext.setProperty('tddAgentPath', it.toString())
            println "agente encontrado en: ${project.tddAgentPath}"
        }
    }
}

test {
    dependsOn findAgentPath
    jvmArgs '-Djdk.attach.allowAttachSelf=true'
    jvmArgs += "-javaagent:${project.tddAgentPath}=net.adbogm.annotations.Entity"
    outputs.upToDateWhen { false }
    testLogging {
        // Make sure output from
        // standard out or error is shown
        // in Gradle output.
        showStandardStreams = true
        // Or we use events method:
        // events 'standard_out', 'standard_error'
 
        // Or set property events:
        // events = ['standard_out', 'standard_error']
 
        // Instead of string values we can
        // use enum values:
        // events org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_OUT,
        //        org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR,
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

//jar {
//    manifest {
//        attributes(
//      'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
//      'Premain-Class':'net.odbogm.agent.TransparentDirtyDetectorAgent',
//      'Agent-Class':'net.odbogm.agent.TransparentDirtyDetectorAgent',
//      'Can-Redefine-Classes':true,
//      'Can-Retransform-Classes':true
//        )
//    }
//}


//create a single Jar with all dependencies
task fatJar(type: Jar) {
    //    manifest {
    //        attributes(
    //      'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
    //      'Premain-Class':'net.odbogm.agent.TransparentDirtyDetectorAgent',
    //      'Agent-Class':'net.odbogm.agent.TransparentDirtyDetectorAgent',
    //      'Can-Redefine-Classes':true,
    //      'Can-Retransform-Classes':true
    //        )
    //    }
    archiveBaseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}


javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

signing {
    if (project.gradle.startParameter.taskNames.join(",").toLowerCase().contains("release")) {
        //required { gradle.taskGraph.hasTask("uploadArchives")}

        //    ext."signing.keyId"= credentials.gpgKeyId
        //    ext."signing.password"= credentials.gpgKeyPassword
        //    ext."signing.secretKeyRingFile" = credentials.gpgKeyRingFile                

        //    println ext."signing.keyId"

        sign(configurations.archives)
    }
}


nexusPublishing {
    repositories {
        //sonatype()
        sonatype {
            username = sonatypeUser
            password = sonatypePassword
        }
    }
}


// para publicar en sonatype:
// gradle publishToSonatype closeAndReleaseSonatypeStagingRepository sabn
publishing {
    publications {
        mavenJava(MavenPublication) {
            //artifactId = 'my-library'
            from components.java
        
            // versionMapping {
            //     usage('java-api') {
            //         fromResolutionOf('runtimeClasspath')
            //     }
            //     usage('java-runtime') {
            //         fromResolutionResult()
            //     }
            // }
            pom {
                name = "$artifactId"
                description  = "$description"
                url = 'https://github.com/mdre/adbogm'
                
                // packaging = 'jar'
                // optionally artifactId can be defined here 

                // properties = [
                //     myProp: "value",
                //     "prop.with.dots": "anotherValue"
                // ]
                scm {
                    connection = 'scm:git:git://github.com/mdre/adbogm.git'
                    developerConnection = 'scm:git:ssh://github.com/mdre/adbogm.git'
                    url = 'https://github.com/mdre/adbogm'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'mdre'
                        name = 'Marcelo D. RE'
                        email = 'marcelo.re@gmail.com'
                    }
                }
            }
        }
    }

}

signing {
    sign publishing.publications.mavenJava
}

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
    ext.mainClass = ''
}


task runFile(dependsOn: 'classes',type:JavaExec) {
    if (project.hasProperty('mainClass')) {
        main = mainClass
        classpath = sourceSets.main.runtimeClasspath
        standardOutput = System.out
        errorOutput = System.err
    }
}


task debug(dependsOn: 'classes',type:JavaExec) {
    if (project.hasProperty('mainClass')) {
        main = mainClass
        classpath = sourceSets.main.runtimeClasspath
        standardOutput = System.out
        errorOutput = System.err
        debug true
    }
}

// ************************************************************************************
// Imprimir el listado de dependencias
// ************************************************************************************
task printDep (){
    println("Dependencies: ")
    configurations.compileClasspath.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
        println dep
    }
}


